// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Broadcast.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Pq_Streaming_Games_Timer_Countdown {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var time: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pq_Streaming_Games_Timer_Connection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gameID: String {
    get {return _storage._gameID}
    set {_uniqueStorage()._gameID = newValue}
  }

  var user: Pq_User_User {
    get {return _storage._user ?? Pq_User_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  var active: Bool {
    get {return _storage._active}
    set {_uniqueStorage()._active = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Pq_Streaming_Games_Timer_Message {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var time: Int64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  var question: Pq_Qb_Questions_Question {
    get {return _storage._question ?? Pq_Qb_Questions_Question()}
    set {_uniqueStorage()._question = newValue}
  }
  /// Returns true if `question` has been explicitly set.
  var hasQuestion: Bool {return _storage._question != nil}
  /// Clears the value of `question`. Subsequent reads from it will return its default value.
  mutating func clearQuestion() {_uniqueStorage()._question = nil}

  var newPlayer: Pq_User_User {
    get {return _storage._newPlayer ?? Pq_User_User()}
    set {_uniqueStorage()._newPlayer = newValue}
  }
  /// Returns true if `newPlayer` has been explicitly set.
  var hasNewPlayer: Bool {return _storage._newPlayer != nil}
  /// Clears the value of `newPlayer`. Subsequent reads from it will return its default value.
  mutating func clearNewPlayer() {_uniqueStorage()._newPlayer = nil}

  var removedPlayer: Pq_User_User {
    get {return _storage._removedPlayer ?? Pq_User_User()}
    set {_uniqueStorage()._removedPlayer = newValue}
  }
  /// Returns true if `removedPlayer` has been explicitly set.
  var hasRemovedPlayer: Bool {return _storage._removedPlayer != nil}
  /// Clears the value of `removedPlayer`. Subsequent reads from it will return its default value.
  mutating func clearRemovedPlayer() {_uniqueStorage()._removedPlayer = nil}

  var end: Bool {
    get {return _storage._end}
    set {_uniqueStorage()._end = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Pq_Streaming_Games_Timer_StartQuestion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var question: Pq_Qb_Questions_Question {
    get {return _storage._question ?? Pq_Qb_Questions_Question()}
    set {_uniqueStorage()._question = newValue}
  }
  /// Returns true if `question` has been explicitly set.
  var hasQuestion: Bool {return _storage._question != nil}
  /// Clears the value of `question`. Subsequent reads from it will return its default value.
  mutating func clearQuestion() {_uniqueStorage()._question = nil}

  var isHost: Bool {
    get {return _storage._isHost}
    set {_uniqueStorage()._isHost = newValue}
  }

  var gameID: String {
    get {return _storage._gameID}
    set {_uniqueStorage()._gameID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Pq_Streaming_Games_Timer_EndGame {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gameID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pq_Streaming_Games_Timer_DisconnectResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pq_Streaming_Games_Timer_HeartbeatResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pq_Streaming_Games_Timer_PlayerlistRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gameID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pq_Streaming_Games_Timer_PlayerListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var players: [Pq_User_User] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "pq.streaming.games.timer"

extension Pq_Streaming_Games_Timer_Countdown: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Countdown"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.time)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pq_Streaming_Games_Timer_Countdown, rhs: Pq_Streaming_Games_Timer_Countdown) -> Bool {
    if lhs.time != rhs.time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pq_Streaming_Games_Timer_Connection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Connection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_id"),
    2: .same(proto: "user"),
    3: .same(proto: "active"),
  ]

  fileprivate class _StorageClass {
    var _gameID: String = String()
    var _user: Pq_User_User? = nil
    var _active: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _gameID = source._gameID
      _user = source._user
      _active = source._active
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._gameID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._active)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._gameID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gameID, fieldNumber: 1)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._active != false {
        try visitor.visitSingularBoolField(value: _storage._active, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pq_Streaming_Games_Timer_Connection, rhs: Pq_Streaming_Games_Timer_Connection) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._gameID != rhs_storage._gameID {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._active != rhs_storage._active {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pq_Streaming_Games_Timer_Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Message"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Time"),
    2: .same(proto: "Question"),
    3: .same(proto: "NewPlayer"),
    4: .same(proto: "RemovedPlayer"),
    5: .same(proto: "End"),
  ]

  fileprivate class _StorageClass {
    var _time: Int64 = 0
    var _question: Pq_Qb_Questions_Question? = nil
    var _newPlayer: Pq_User_User? = nil
    var _removedPlayer: Pq_User_User? = nil
    var _end: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _time = source._time
      _question = source._question
      _newPlayer = source._newPlayer
      _removedPlayer = source._removedPlayer
      _end = source._end
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._time)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._question)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._newPlayer)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._removedPlayer)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._end)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._time != 0 {
        try visitor.visitSingularInt64Field(value: _storage._time, fieldNumber: 1)
      }
      if let v = _storage._question {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._newPlayer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._removedPlayer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._end != false {
        try visitor.visitSingularBoolField(value: _storage._end, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pq_Streaming_Games_Timer_Message, rhs: Pq_Streaming_Games_Timer_Message) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._time != rhs_storage._time {return false}
        if _storage._question != rhs_storage._question {return false}
        if _storage._newPlayer != rhs_storage._newPlayer {return false}
        if _storage._removedPlayer != rhs_storage._removedPlayer {return false}
        if _storage._end != rhs_storage._end {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pq_Streaming_Games_Timer_StartQuestion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StartQuestion"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "question"),
    2: .standard(proto: "is_host"),
    3: .standard(proto: "game_id"),
  ]

  fileprivate class _StorageClass {
    var _question: Pq_Qb_Questions_Question? = nil
    var _isHost: Bool = false
    var _gameID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _question = source._question
      _isHost = source._isHost
      _gameID = source._gameID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._question)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._isHost)
        case 3: try decoder.decodeSingularStringField(value: &_storage._gameID)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._question {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._isHost != false {
        try visitor.visitSingularBoolField(value: _storage._isHost, fieldNumber: 2)
      }
      if !_storage._gameID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gameID, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pq_Streaming_Games_Timer_StartQuestion, rhs: Pq_Streaming_Games_Timer_StartQuestion) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._question != rhs_storage._question {return false}
        if _storage._isHost != rhs_storage._isHost {return false}
        if _storage._gameID != rhs_storage._gameID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pq_Streaming_Games_Timer_EndGame: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EndGame"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "game_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 3: try decoder.decodeSingularStringField(value: &self.gameID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gameID.isEmpty {
      try visitor.visitSingularStringField(value: self.gameID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pq_Streaming_Games_Timer_EndGame, rhs: Pq_Streaming_Games_Timer_EndGame) -> Bool {
    if lhs.gameID != rhs.gameID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pq_Streaming_Games_Timer_DisconnectResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DisconnectResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pq_Streaming_Games_Timer_DisconnectResponse, rhs: Pq_Streaming_Games_Timer_DisconnectResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pq_Streaming_Games_Timer_HeartbeatResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HeartbeatResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pq_Streaming_Games_Timer_HeartbeatResponse, rhs: Pq_Streaming_Games_Timer_HeartbeatResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pq_Streaming_Games_Timer_PlayerlistRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerlistRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.gameID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gameID.isEmpty {
      try visitor.visitSingularStringField(value: self.gameID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pq_Streaming_Games_Timer_PlayerlistRequest, rhs: Pq_Streaming_Games_Timer_PlayerlistRequest) -> Bool {
    if lhs.gameID != rhs.gameID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pq_Streaming_Games_Timer_PlayerListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerListResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "players"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.players)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.players.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.players, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pq_Streaming_Games_Timer_PlayerListResponse, rhs: Pq_Streaming_Games_Timer_PlayerListResponse) -> Bool {
    if lhs.players != rhs.players {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
