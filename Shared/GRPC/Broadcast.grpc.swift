//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: Broadcast.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Pq_Streaming_Games_Timer_BroadcastCreateStreamCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Pq_Streaming_Games_Timer_Message?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Pq_Streaming_Games_Timer_Message?>) -> Void) throws
}

internal extension Pq_Streaming_Games_Timer_BroadcastCreateStreamCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Pq_Streaming_Games_Timer_Message? { return try self._receive(timeout: timeout) }
}

fileprivate final class Pq_Streaming_Games_Timer_BroadcastCreateStreamCallBase: ClientCallServerStreamingBase<Pq_Streaming_Games_Timer_Connection, Pq_Streaming_Games_Timer_Message>, Pq_Streaming_Games_Timer_BroadcastCreateStreamCall {
  override class var method: String { return "/pq.streaming.games.timer.Broadcast/CreateStream" }
}

internal protocol Pq_Streaming_Games_Timer_BroadcastDisconnectCall: ClientCallUnary {}

fileprivate final class Pq_Streaming_Games_Timer_BroadcastDisconnectCallBase: ClientCallUnaryBase<Pq_Streaming_Games_Timer_Connection, Pq_Streaming_Games_Timer_DisconnectResponse>, Pq_Streaming_Games_Timer_BroadcastDisconnectCall {
  override class var method: String { return "/pq.streaming.games.timer.Broadcast/Disconnect" }
}

internal protocol Pq_Streaming_Games_Timer_BroadcastHeartbeatCall: ClientCallUnary {}

fileprivate final class Pq_Streaming_Games_Timer_BroadcastHeartbeatCallBase: ClientCallUnaryBase<Pq_Streaming_Games_Timer_Connection, Pq_Streaming_Games_Timer_HeartbeatResponse>, Pq_Streaming_Games_Timer_BroadcastHeartbeatCall {
  override class var method: String { return "/pq.streaming.games.timer.Broadcast/Heartbeat" }
}

internal protocol Pq_Streaming_Games_Timer_BroadcastStartCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Pq_Streaming_Games_Timer_Message?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Pq_Streaming_Games_Timer_Message?>) -> Void) throws
}

internal extension Pq_Streaming_Games_Timer_BroadcastStartCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Pq_Streaming_Games_Timer_Message? { return try self._receive(timeout: timeout) }
}

fileprivate final class Pq_Streaming_Games_Timer_BroadcastStartCallBase: ClientCallServerStreamingBase<Pq_Streaming_Games_Timer_StartQuestion, Pq_Streaming_Games_Timer_Message>, Pq_Streaming_Games_Timer_BroadcastStartCall {
  override class var method: String { return "/pq.streaming.games.timer.Broadcast/Start" }
}

internal protocol Pq_Streaming_Games_Timer_BroadcastEndCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Pq_Streaming_Games_Timer_Message?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Pq_Streaming_Games_Timer_Message?>) -> Void) throws
}

internal extension Pq_Streaming_Games_Timer_BroadcastEndCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Pq_Streaming_Games_Timer_Message? { return try self._receive(timeout: timeout) }
}

fileprivate final class Pq_Streaming_Games_Timer_BroadcastEndCallBase: ClientCallServerStreamingBase<Pq_Streaming_Games_Timer_EndGame, Pq_Streaming_Games_Timer_Message>, Pq_Streaming_Games_Timer_BroadcastEndCall {
  override class var method: String { return "/pq.streaming.games.timer.Broadcast/End" }
}

internal protocol Pq_Streaming_Games_Timer_BroadcastGetPlayerListCall: ClientCallUnary {}

fileprivate final class Pq_Streaming_Games_Timer_BroadcastGetPlayerListCallBase: ClientCallUnaryBase<Pq_Streaming_Games_Timer_PlayerlistRequest, Pq_Streaming_Games_Timer_PlayerListResponse>, Pq_Streaming_Games_Timer_BroadcastGetPlayerListCall {
  override class var method: String { return "/pq.streaming.games.timer.Broadcast/GetPlayerList" }
}


/// Instantiate Pq_Streaming_Games_Timer_BroadcastServiceClient, then call methods of this protocol to make API calls.
internal protocol Pq_Streaming_Games_Timer_BroadcastService: ServiceClient {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func createStream(_ request: Pq_Streaming_Games_Timer_Connection, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Pq_Streaming_Games_Timer_BroadcastCreateStreamCall

  /// Synchronous. Unary.
  func disconnect(_ request: Pq_Streaming_Games_Timer_Connection, metadata customMetadata: Metadata) throws -> Pq_Streaming_Games_Timer_DisconnectResponse
  /// Asynchronous. Unary.
  @discardableResult
  func disconnect(_ request: Pq_Streaming_Games_Timer_Connection, metadata customMetadata: Metadata, completion: @escaping (Pq_Streaming_Games_Timer_DisconnectResponse?, CallResult) -> Void) throws -> Pq_Streaming_Games_Timer_BroadcastDisconnectCall

  /// Synchronous. Unary.
  func heartbeat(_ request: Pq_Streaming_Games_Timer_Connection, metadata customMetadata: Metadata) throws -> Pq_Streaming_Games_Timer_HeartbeatResponse
  /// Asynchronous. Unary.
  @discardableResult
  func heartbeat(_ request: Pq_Streaming_Games_Timer_Connection, metadata customMetadata: Metadata, completion: @escaping (Pq_Streaming_Games_Timer_HeartbeatResponse?, CallResult) -> Void) throws -> Pq_Streaming_Games_Timer_BroadcastHeartbeatCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func start(_ request: Pq_Streaming_Games_Timer_StartQuestion, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Pq_Streaming_Games_Timer_BroadcastStartCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func end(_ request: Pq_Streaming_Games_Timer_EndGame, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Pq_Streaming_Games_Timer_BroadcastEndCall

  /// Synchronous. Unary.
  func getPlayerList(_ request: Pq_Streaming_Games_Timer_PlayerlistRequest, metadata customMetadata: Metadata) throws -> Pq_Streaming_Games_Timer_PlayerListResponse
  /// Asynchronous. Unary.
  @discardableResult
  func getPlayerList(_ request: Pq_Streaming_Games_Timer_PlayerlistRequest, metadata customMetadata: Metadata, completion: @escaping (Pq_Streaming_Games_Timer_PlayerListResponse?, CallResult) -> Void) throws -> Pq_Streaming_Games_Timer_BroadcastGetPlayerListCall

}

internal extension Pq_Streaming_Games_Timer_BroadcastService {
  /// Asynchronous. Server-streaming.
  func createStream(_ request: Pq_Streaming_Games_Timer_Connection, completion: ((CallResult) -> Void)?) throws -> Pq_Streaming_Games_Timer_BroadcastCreateStreamCall {
    return try self.createStream(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func disconnect(_ request: Pq_Streaming_Games_Timer_Connection) throws -> Pq_Streaming_Games_Timer_DisconnectResponse {
    return try self.disconnect(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func disconnect(_ request: Pq_Streaming_Games_Timer_Connection, completion: @escaping (Pq_Streaming_Games_Timer_DisconnectResponse?, CallResult) -> Void) throws -> Pq_Streaming_Games_Timer_BroadcastDisconnectCall {
    return try self.disconnect(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func heartbeat(_ request: Pq_Streaming_Games_Timer_Connection) throws -> Pq_Streaming_Games_Timer_HeartbeatResponse {
    return try self.heartbeat(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func heartbeat(_ request: Pq_Streaming_Games_Timer_Connection, completion: @escaping (Pq_Streaming_Games_Timer_HeartbeatResponse?, CallResult) -> Void) throws -> Pq_Streaming_Games_Timer_BroadcastHeartbeatCall {
    return try self.heartbeat(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func start(_ request: Pq_Streaming_Games_Timer_StartQuestion, completion: ((CallResult) -> Void)?) throws -> Pq_Streaming_Games_Timer_BroadcastStartCall {
    return try self.start(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func end(_ request: Pq_Streaming_Games_Timer_EndGame, completion: ((CallResult) -> Void)?) throws -> Pq_Streaming_Games_Timer_BroadcastEndCall {
    return try self.end(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func getPlayerList(_ request: Pq_Streaming_Games_Timer_PlayerlistRequest) throws -> Pq_Streaming_Games_Timer_PlayerListResponse {
    return try self.getPlayerList(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getPlayerList(_ request: Pq_Streaming_Games_Timer_PlayerlistRequest, completion: @escaping (Pq_Streaming_Games_Timer_PlayerListResponse?, CallResult) -> Void) throws -> Pq_Streaming_Games_Timer_BroadcastGetPlayerListCall {
    return try self.getPlayerList(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Pq_Streaming_Games_Timer_BroadcastServiceClient: ServiceClientBase, Pq_Streaming_Games_Timer_BroadcastService {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func createStream(_ request: Pq_Streaming_Games_Timer_Connection, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Pq_Streaming_Games_Timer_BroadcastCreateStreamCall {
    return try Pq_Streaming_Games_Timer_BroadcastCreateStreamCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func disconnect(_ request: Pq_Streaming_Games_Timer_Connection, metadata customMetadata: Metadata) throws -> Pq_Streaming_Games_Timer_DisconnectResponse {
    return try Pq_Streaming_Games_Timer_BroadcastDisconnectCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func disconnect(_ request: Pq_Streaming_Games_Timer_Connection, metadata customMetadata: Metadata, completion: @escaping (Pq_Streaming_Games_Timer_DisconnectResponse?, CallResult) -> Void) throws -> Pq_Streaming_Games_Timer_BroadcastDisconnectCall {
    return try Pq_Streaming_Games_Timer_BroadcastDisconnectCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func heartbeat(_ request: Pq_Streaming_Games_Timer_Connection, metadata customMetadata: Metadata) throws -> Pq_Streaming_Games_Timer_HeartbeatResponse {
    return try Pq_Streaming_Games_Timer_BroadcastHeartbeatCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func heartbeat(_ request: Pq_Streaming_Games_Timer_Connection, metadata customMetadata: Metadata, completion: @escaping (Pq_Streaming_Games_Timer_HeartbeatResponse?, CallResult) -> Void) throws -> Pq_Streaming_Games_Timer_BroadcastHeartbeatCall {
    return try Pq_Streaming_Games_Timer_BroadcastHeartbeatCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func start(_ request: Pq_Streaming_Games_Timer_StartQuestion, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Pq_Streaming_Games_Timer_BroadcastStartCall {
    return try Pq_Streaming_Games_Timer_BroadcastStartCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func end(_ request: Pq_Streaming_Games_Timer_EndGame, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Pq_Streaming_Games_Timer_BroadcastEndCall {
    return try Pq_Streaming_Games_Timer_BroadcastEndCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getPlayerList(_ request: Pq_Streaming_Games_Timer_PlayerlistRequest, metadata customMetadata: Metadata) throws -> Pq_Streaming_Games_Timer_PlayerListResponse {
    return try Pq_Streaming_Games_Timer_BroadcastGetPlayerListCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func getPlayerList(_ request: Pq_Streaming_Games_Timer_PlayerlistRequest, metadata customMetadata: Metadata, completion: @escaping (Pq_Streaming_Games_Timer_PlayerListResponse?, CallResult) -> Void) throws -> Pq_Streaming_Games_Timer_BroadcastGetPlayerListCall {
    return try Pq_Streaming_Games_Timer_BroadcastGetPlayerListCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

