// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: QuestionOption.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Pq_Qb_Questions_Option_OptionKey: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case a // = 0
  case b // = 1
  case c // = 2
  case d // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .a
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .a
    case 1: self = .b
    case 2: self = .c
    case 3: self = .d
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .a: return 0
    case .b: return 1
    case .c: return 2
    case .d: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Pq_Qb_Questions_Option_OptionKey: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Pq_Qb_Questions_Option_OptionKey] = [
    .a,
    .b,
    .c,
    .d,
  ]
}

#endif  // swift(>=4.2)

struct Pq_Qb_Questions_Option_QuestionOption {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: Pq_Qb_Questions_Option_OptionKey = .a

  var title: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "pq.qb.questions.option"

extension Pq_Qb_Questions_Option_OptionKey: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "A"),
    1: .same(proto: "B"),
    2: .same(proto: "C"),
    3: .same(proto: "D"),
  ]
}

extension Pq_Qb_Questions_Option_QuestionOption: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QuestionOption"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "title"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.key)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.key != .a {
      try visitor.visitSingularEnumField(value: self.key, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pq_Qb_Questions_Option_QuestionOption, rhs: Pq_Qb_Questions_Option_QuestionOption) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.title != rhs.title {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
